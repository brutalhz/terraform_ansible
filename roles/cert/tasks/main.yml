---
- name: Install EPEL Repo
  yum:
    name: epel-release
    state: present
  when: ansible_os_family == "RedHat"

- name: Install Certbot for CentOS
  yum:
    update_cache: "{{ update_apt_cache }}"
    state: present
    name:
      - certbot
      - python2-certbot-nginx
  when: ansible_os_family == "RedHat"
  tags: packages

- name: Install Certbot for Ubuntu
  apt:
    update_cache: "{{ update_apt_cache }}"
    state: present
    name:
      - certbot
      - python3-certbot-nginx
  when: ansible_os_family == "Debian"
  tags: packages

- name: Check if Nginx exists
  stat: path=/etc/init.d/nginx
  register: nginx_status

- name: Ensure Nginx is stopped
  service: name=nginx state=stopped
  when: nginx_status.stat.exists

- name: Install certbot and generate cert
  command: "{{ certbot_script }} certonly --noninteractive --agree-tos --standalone --email {{ certbot_admin_email }} -d {{ inventory_hostname_u }}"
  args:
    creates: "{{ certbot_output_dir }}"
  when: ansible_os_family == "Debian"

- name: Install certbot and generate cert
  command: "{{ certbot_script }} certonly --noninteractive --agree-tos --standalone --email {{ certbot_admin_email }} -d {{ inventory_hostname_c }}"
  args:
    creates: "{{ certbot_output_dir }}"
  when: ansible_os_family == "RedHat"

- name: Ensure Nginx is started
  service: name=nginx state=started
  when: nginx_status.stat.exists

- name: Ensure a cron job to auto-renew the cert exists
  cron: name="daily auto renew cert"
        special_time=daily
        job="{{ certbot_script }} renew --standalone --no-self-upgrade --post-hook \"systemctl reload nginx\" --quiet"
        state=present
  when: certbot_auto_renew
